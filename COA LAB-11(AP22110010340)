1. (a) Write a program in assembly language to find L.C.M of two
single-digit numbers.
CODE:-
org 100h
jmp start
msginput1 db "Enter the First Digit: $"
msginput2 db 0Dh,0Ah,"Enter the Second Digit: $"
output db 0Dh,0Ah,"LCM of the Given two numbers is: $"
start:
    ; Display "Enter the First Digit:"
    mov dx, offset msginput1
    mov ah, 09h
    int 21h  

    ; Read first digit
    mov ah, 01h
    int 21h
    sub al, '0'       ; Convert ASCII to numerical value
    mov cl, al        ; Store first number in CL

    ; Display "Enter the Second Digit:"
    mov dx, offset msginput2
    mov ah, 09h
    int 21h

    ; Read second digit
    mov ah, 01h
    int 21h
    sub al, '0'       ; Convert ASCII to numerical value
    mov ch, al        ; Store second number in CH

    ; Copy CL and CH to registers for GCD calculation
    mov al, cl        ; AL = first number
    mov bl, ch        ; BL = second number

GCD_LOOP:
    cmp bl, 0
    je DONE_GCD
    mov ah, 0
    div bl            ; Divide AL by BL, remainder in AH, quotient in AL
    mov al, bl
    mov bl, ah
    jmp GCD_LOOP

DONE_GCD:
    ; Now AL contains the GCD
    mov bh, al        ; Store GCD in BH

    ; Calculate LCM = (CL * CH) / GCD
    mov al, cl        ; AL = first number
    mul ch            ; AX = AL * CH (product of the two numbers)

    mov bl, bh        ; Move GCD to BL
    div bl            ; AX / GCD, result in AL
    
    mov bl, al
    ; Display "LCM of the Given two numbers is:"
    mov dx, offset output
    mov ah, 09h
    int 21h 


mov ax, 0            ; Clear AX register
mov al, bl           ; Move the result from BL to AL

mov cx, 10           ; Set divisor to 10 (for decimal conversion)

dec_to_ascii:
    xor dx, dx       ; Clear DX for division
    div cx           ; AX / 10 -> Quotient in AL, Remainder in DL
    add dl, '0'      ; Convert remainder to ASCII
    push dx          ; Store remainder on stack
    test al, al      ; Check if quotient is zero
    jnz dec_to_ascii ; Repeat if quotient is not zero

print_decimal:
    pop dx           ; Get character from stack
    mov ah, 02h      ; DOS function to display character in DL
    int 21h          ; Print character
    cmp sp, 0        ; Check if stack is empty
    jne print_decimal ; Repeat if stack not empty

    ; Exit program
    mov ah, 4Ch
    int 21h
OUTPUT:-
 LCM is:- 8
 
(b) Write an assembly language program to display the nth term
of a fibonacci series. “n” must be a single digit number which may
be taken from the user.
CODE:-
.model small
.stack 100h
.data
    prompt db 'Enter a single digit number <n>: $'
    result_msg db 0Dh,0Ah,'The nth Fibonacci number is: $'
    fib dw 0       ; Store the nth Fibonacci number in a word (16 bits)
.code
main proc
    ; Initialize data segment
    mov ax, @data
    mov ds, ax
    ; Prompt the user for input
    mov ah, 09h
    lea dx, prompt
    int 21h
    ; Read a single character input
    mov ah, 01h
    int 21h
    sub al, '0'    ; Convert ASCII to integer
    mov cl, al     ; Store n in cl
    ; Check for n = 0 or n = 1 directly
    cmp cl, 1
    jbe single_digit_fib
    ; For n > 1, calculate Fibonacci using loop
    ; Initialize Fibonacci values
    mov ax, 0      ; First Fibonacci number (16-bit for larger values)
    mov bx, 1      ; Second Fibonacci number (16-bit)
fib_loop:
    dec cl         ; Decrease count
    jz store_result ; If count reaches zero, store result
    ; Calculate next Fibonacci number
    add ax, bx     ; F_n = F_(n-1) + F_(n-2)
    xchg ax, bx    ; Move F_(n-1) to F_(n-2) and update F_(n-1)
    jmp fib_loop   ; Repeat loop until cl = 0
store_result:
    mov fib, ax    ; Store the result in fib
single_digit_fib:
    ; For n = 0 or 1, bx already contains the correct Fibonacci number
    cmp cl, 0
    je show_fib0
    mov fib, bx    ; For n=1, F_1 is 1
    jmp display_result
show_fib0:
    mov fib, ax    ; For n=0, F_0 is 0
display_result:
    ; Display result message
    mov ah, 09h
    lea dx, result_msg
    int 21h
    ; Convert the result in fib to ASCII and display
    mov ax, fib        ; Load result into ax
    call print_number  ; Call subroutine to print the number
    ; Exit program
    mov ah, 4Ch
    int 21h
main endp
; Subroutine to print a number in AX as ASCII
print_number proc
    ; Divide ax by 10 repeatedly to extract each digit in reverse
    mov cx, 10        ; Set base to 10
    mov bx, 0         ; Initialize bx as digit storage
reverse_digits:
    xor dx, dx        ; Clear dx for division
    div cx            ; AX / 10, quotient in AX, remainder in DX
    push dx           ; Push remainder onto stack (digit)
    inc bx            ; Count digits
    test ax, ax       ; Check if quotient is 0
    jnz reverse_digits
display_digits:
    pop dx            ; Get last pushed digit
    add dl, '0'       ; Convert to ASCII
    mov ah, 02h       ; DOS print character function
    int 21h           ; Display character
    dec bx            ; Decrement digit count
    jnz display_digits
    ret
print_number endp
end main
OUTPUT:-
 Emter a single digit number <n>:- 4
 The nth fibonacci number is:- 2
 
Practice set:
2. Write an assembly language program to find the factorial of a
given single-digit number.
CODE:-
.model small
.stack 100h
.data
    prompt db 'Enter a single digit number: $'
    result_msg db 0Dh,0Ah,'The factorial is: $'
    factorial dw 1    ; 16-bit variable to store factorial result
.code
main proc
    ; Initialize data segment
    mov ax, @data
    mov ds, ax
    ; Display prompt to enter a number
    mov ah, 09h
    lea dx, prompt
    int 21h
    ; Read a single character input
    mov ah, 01h
    int 21h
    sub al, '0'        ; Convert ASCII to integer
    mov bl, al         ; Store the number in BL for calculation
    ; Special case for 0! which is 1
    cmp bl, 0
    jne calculate_factorial
    mov factorial, 1
    jmp display_result
calculate_factorial:
    mov cx, bx         ; Set loop counter to the number entered (n)
    mov ax, 1          ; AX will store the ongoing factorial result
factorial_loop:
    mul cx             ; AX = AX * CX (calculate factorial)
    loop factorial_loop ; Decrement CX and repeat until CX = 0
    mov factorial, ax  ; Store final factorial result in 'factorial'
display_result:
    ; Display result message
    mov ah, 09h
    lea dx, result_msg
    int 21h
    ; Convert the result in factorial to ASCII and display
    mov ax, factorial  ; Load factorial result into AX
    call print_number  ; Call subroutine to print the number
    ; Exit program
    mov ah, 4Ch
    int 21h
main endp
; Subroutine to print a number in AX as ASCII
print_number proc
    ; Divide ax by 10 repeatedly to extract each digit in reverse
    mov cx, 10        ; Set base to 10
    mov bx, 0         ; Initialize bx as digit storage
reverse_digits:
    xor dx, dx        ; Clear dx for division
    div cx            ; AX / 10, quotient in AX, remainder in DX
    push dx           ; Push remainder onto stack (digit)
    inc bx            ; Count digits
    test ax, ax       ; Check if quotient is 0
    jnz reverse_digits
display_digits:
    pop dx            ; Get last pushed digit
    add dl, '0'       ; Convert to ASCII
    mov ah, 02h       ; DOS print character function
    int 21h           ; Display character
    dec bx            ; Decrement digit count
    jnz display_digits
    ret
print_number endp
end main
OUTPUT:-
Enter a single digit number :- 5
The factorial is:- 120
